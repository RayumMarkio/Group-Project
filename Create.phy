from flask import Flask, request, redirect, render_template, session, flash
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Make sure to change this to a secure secret key
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///online_diary.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'uploads'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100))
    
    journals = db.relationship('Journal', backref='user', lazy=True)

class Journal(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))
    description = db.Column(db.Text)
    date = db.Column(db.String(50))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    images = db.relationship('Image', backref='journal', lazy=True)

class Image(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    image_url = db.Column(db.String(255))
    journal_id = db.Column(db.Integer, db.ForeignKey('journal.id'), nullable=False)

db.create_all()

@app.route('/create_journal', methods=['GET', 'POST'])
def create_journal():
    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        date = request.form['date']
        current_user = session.get('email')
        user = User.query.filter_by(email=current_user).first()
        
        if user:
            journal = Journal(title=title, description=description, date=date, user_id=user.id)
            db.session.add(journal)
            db.session.commit()
            journal_id = journal.id

            # Handle image upload
            if 'uploadedImage' in request.files:
                image = request.files['uploadedImage']
                if image:
                    image_filename = os.path.join(app.config['UPLOAD_FOLDER'], image.filename)
                    image.save(image_filename)
                    new_image = Image(image_url=image_filename, journal_id=journal_id)
                    db.session.add(new_image)
                    db.session.commit()
                    
            return redirect(f"/edit_journal/{journal_id}")
    
    return render_template('create_journal.html')

@app.route('/edit_journal/<int:id>', methods=['GET', 'POST'])
def edit_journal(id):
    journal = Journal.query.get(id)
    if not journal:
        return redirect('/')
    
    if request.method == 'POST':
        journal.title = request.form['title']
        journal.description = request.form['description']
        journal.date = request.form['date']
        db.session.commit()

        # Handle image upload
        if 'uploadedImage' in request.files:
            image = request.files['uploadedImage']
            if image:
                image_filename = os.path.join(app.config['UPLOAD_FOLDER'], image.filename)
                image.save(image_filename)
                new_image = Image(image_url=image_filename, journal_id=journal.id)
                db.session.add(new_image)
                db.session.commit()
        
        return redirect(f"/edit_journal/{journal.id}")

    # Fetch the image URL
    image = Image.query.filter_by(journal_id=journal.id).first()
    image_url = image.image_url if image else None

    return render_template('edit_journal.html', journal=journal, image_url=image_url)

@app.route('/login', methods=['POST'])
def login():
    email = request.form['email']
    password = request.form['password']
    user = User.query.filter_by(email=email, password=password).first()

    if user:
        session['email'] = user.email
        session['first_name'] = user.first_name
        return redirect(f"/journals?id={user.id}")
    else:
        flash("Incorrect email or password.")
        return redirect('/')

@app.route('/journals')
def journals():
    user_id = request.args.get('id')
    user = User.query.get(user_id)
    if user:
        journals = Journal.query.filter_by(user_id=user.id).all()
        return render_template('journals.html', user=user, journals=journals)
    else:
        flash("User not found")
        return redirect('/')

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

if __name__ == '__main__':
    app.run(debug=True)
